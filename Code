import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/demand.csv")
data = data.dropna()

# Use only first 50 data points
data = data.head(50)

# Create a date range that matches the length of the data DataFrame
date_range = pd.date_range(start='1/1/2023', periods=len(data), freq='W')

# Format dates in desired format
date_range = [date.strftime('%d/%b/%Y') for date in date_range]

# Add date range to data
data['Date'] = date_range

# Split data into training and test sets
X = data[['Store ID', 'Total Price', 'Base Price']]
y = data['Units Sold']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Train model
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Add heading on top of line chart
plt.suptitle('Product Demand Prediction - Anjul Verma')

# Plot actual vs predicted demand
plt.plot(date_range[:len(y_test)], y_test.values, label='Actual')
plt.plot(date_range[:len(y_pred)], y_pred, label='Predicted')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Units Sold')

# Add labels to each data point
for i, value in enumerate(y_test.values):
    plt.annotate(value, (date_range[i], value))
for i, value in enumerate(y_pred):
    plt.annotate(value, (date_range[i], value))

# Rotate x-tick labels
plt.xticks(rotation=45)

plt.show()
